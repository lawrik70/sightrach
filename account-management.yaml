components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    account:
      type: object
      properties:
        id:
          type: integer
        user_name:
          type: string
        business_type_id:
          type: integer
          default: null
        wizard_enabled:
          type: boolean
          default: true
        last_login:
          type: integer
    person:
      type: object
      properties:
        name:
          type: string
        last_name:
          type: string
        street_address:
          type: string
        city:
          type: string
        country:
          type: string
        postal_code:
          type: string
        phone_number:
          type: string
        email:
          type: string
        is_default:
          type: boolean
    company:
      type: object
      properties:
       name:
         type: string
       street_address:
         type: string
       city:
         type: string
       country:
         type: string
       postal_code:
         type: string
       phone_number:
         type: string
       email:
         type: string
security:
  - bearerAuth: []
openapi: 3.0.3
info:
  title: AERODROME 1.0
  description: This is a sample Aerodrome Server based on the OpenAPI 3.0 specification.
  version: 1.0.0
servers:
  - url: https://h73q45ao7a.execute-api.eu-central-1.amazonaws.com/dev/
tags:
  - name: New API
    description: New API version
paths:
  /account-management/customer/account:
    put:
      tags:
        - Account management
      description: update account
      requestBody:
        description: Update account
        content:
          application/json:
            schema:
              type: object
              properties:
                wizard_enabled:
                  type: boolean
                business_type_id:
                  type: integer
        required: true
      responses:
        200:
          description: Successful update account information
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/account'
        400:
          description: "error response for PUT /account-management/customer/account"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        enum:
                          - 'Duplicate entry error'
                          - 'Error updating account'
                          - 'Missing key in request body'
        500:
          description: "unexpected error response for POST /account-management/customer/account"
          content:
            application/json:
              schema:
                type: object
                properties:
                 error:
                  type: object
                  properties:
                    message:
                      type: string
                    error_type:
                      type: string
                      enum:
                        - UnexpectedException
  /account-management/customer/account/:
    get:
      tags:
        - Account management
      description: Get account information
      responses:
        200:
          description: Successful update account information
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/account'
        404:
          description: Account not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        enum:
                          - 'Account not found'
        400:
          description: Bad request due to missing parameters or invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        enum:
                          - 'Bad request: Missing or invalid parameters'
        401:
          description: Cognito Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        500:
          description: "unexpected error response for POST /account-management/customer/account"
          content:
            application/json:
              schema:
                type: object
                properties:
                 error:
                  type: object
                  properties:
                    message:
                      type: string
                    error_type:
                      type: string
                      enum:
                        - UnexpectedException
                    
###############################################                    
                    
  /account-management/customer/person/{id_to_edit}:
    put:
      tags:
        - Person management
      summary: Update Person info
      parameters:
      - name: "id_to_edit"
        in: "path"
        description: "ID of pet to return"
        required: true
        schema:
          type: "integer"
          format: "int32"
      operationId: set person info
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/person'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        404:
          description: Person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        enum:
                          - 'Person not found'
        401:
          description: Cognito Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        500:
          description: "unexpected error response for PUT /account-management/customer/person/{id_to_edit}"
          content:
            application/json:
              schema:
                type: object
                properties:
                 error:
                  type: object
                  properties:
                    message:
                      type: string
                    error_type:
                      type: string
                      enum:
                        - UnexpectedException
    get:
      tags:
        - Person management
      summary: Get Person info
      parameters:
      - name: "id_to_edit"
        in: "path"
        description: "ID of pet to return"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        404:
          description: Person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        enum:
                          - 'Person not found'
        401:
          description: Cognito Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        500:
          description: "unexpected error response for PUT /account-management/customer/person/{id_to_edit}"
          content:
            application/json:
              schema:
                type: object
                properties:
                 error:
                  type: object
                  properties:
                    message:
                      type: string
                    error_type:
                      type: string
                      enum:
                        - UnexpectedException
    delete:
      tags:
        - Person management
      summary: ID of pet to delete
      parameters:
      - name: "id_to_edit"
        in: "path"
        description: "ID of pet to return"
        required: true
        schema:
          type: "integer"
          format: "int32"
      description: ID of pet to delete
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  body:
                    type: object
                    properties:
                      message:
                        type: string
                      error:
                        type: string
  /account-management/customer/person:
    post:
      tags:
        - Person management
      summary: Create new person
      operationId: post person info
      requestBody:
        description: Create new person
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/person'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  body:
                    type: object
                    properties:
                      message:
                        type: string
                      error:
                        type: string
        '404':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  body:
                    type: object
                    properties:
                      message:
                        type: string
                      error:
                        type: string
    get:
      tags:
        - Person management
      summary: Get Persons info
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        404:
          description: Person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        enum:
                          - 'Person(s) not found'
        401:
          description: Cognito Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        500:
          description: "unexpected error response for PUT /account-management/customer/person"
          content:
            application/json:
              schema:
                type: object
                properties:
                 error:
                  type: object
                  properties:
                    message:
                      type: string
                    error_type:
                      type: string
                      enum:
                        - UnexpectedException                    
    
  ###############################################                    
                    
  /account-management/customer/company:
    put:
      tags:
        - Company management
      summary: Update Company info
      operationId: update company info
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/company'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/company'
        404:
          description: Company not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        enum:
                          - 'Company not found'
        401:
          description: Cognito Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        500:
          description: "unexpected error response for PUT /account-management/customer/company"
          content:
            application/json:
              schema:
                type: object
                properties:
                 error:
                  type: object
                  properties:
                    message:
                      type: string
                    error_type:
                      type: string
                      enum:
                        - UnexpectedException                
  
    post:
      tags:
        - Company management
      summary: Create new company
      operationId: post company info
      requestBody:
        description: Send for get auth token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/company'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/company'
        401:
          description: Cognito Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        500:
          description: "unexpected error response for POST /account-management/customer/company"
          content:
            application/json:
              schema:
                type: object
                properties:
                 error:
                  type: object
                  properties:
                    message:
                      type: string
                    error_type:
                      type: string
                      enum:
                        - UnexpectedException
    get:
      tags:
        - Company management
      summary: Get company info
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/company'                   
    
                        
     

     
  /account-management/customer/company/{id_to_edit1}:             
    delete:
      tags:
        - Company management
      summary: ID of pet to delete
      description: ID of pet to delete
      parameters:
      - name: "id_to_edit1"
        in: "path"
        description: "ID of pet to delete"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  body:
                    type: object
                    properties:
                      message:
                        type: string
                      error:
                        type: string
  /account-management/customer/mcc_code:
    get:
      tags:
        - Company management
      summary: Get MCC codes info
      operationId: mcc codes info
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: string
        404:
          description: Company not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        enum:
                          - 'MCC codes not found'                    
    
